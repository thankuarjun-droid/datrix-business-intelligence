-- Assessment Invitations Table
-- This table stores unique assessment links generated by admins for clients

CREATE TABLE IF NOT EXISTS public.assessment_invitations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    
    -- Unique token for the assessment link
    token VARCHAR(64) UNIQUE NOT NULL,
    
    -- Client information
    client_name VARCHAR(255) NOT NULL,
    client_email VARCHAR(255) NOT NULL,
    client_mobile VARCHAR(20),
    company_name VARCHAR(255) NOT NULL,
    company_type VARCHAR(100),
    designation VARCHAR(100),
    
    -- Assessment status
    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'expired')),
    
    -- Timestamps
    created_at TIMESTAMPTZ DEFAULT NOW(),
    expires_at TIMESTAMPTZ,
    accessed_at TIMESTAMPTZ,
    completed_at TIMESTAMPTZ,
    
    -- Link to user who completed the assessment (if applicable)
    user_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    
    -- Admin who created the invitation
    created_by VARCHAR(255),
    
    -- Notes
    notes TEXT,
    
    -- Payment status (for future use)
    payment_status VARCHAR(50) DEFAULT 'unpaid' CHECK (payment_status IN ('unpaid', 'paid', 'refunded')),
    payment_amount DECIMAL(10, 2),
    payment_date TIMESTAMPTZ
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_assessment_invitations_token ON public.assessment_invitations(token);
CREATE INDEX IF NOT EXISTS idx_assessment_invitations_status ON public.assessment_invitations(status);
CREATE INDEX IF NOT EXISTS idx_assessment_invitations_client_email ON public.assessment_invitations(client_email);
CREATE INDEX IF NOT EXISTS idx_assessment_invitations_created_at ON public.assessment_invitations(created_at DESC);

-- Enable Row Level Security
ALTER TABLE public.assessment_invitations ENABLE ROW LEVEL SECURITY;

-- Policy: Allow public read access for valid tokens (for assessment access)
CREATE POLICY "Allow public read for valid tokens" ON public.assessment_invitations
    FOR SELECT
    USING (status IN ('pending', 'in_progress') AND (expires_at IS NULL OR expires_at > NOW()));

-- Policy: Allow authenticated users to insert (for admin panel)
CREATE POLICY "Allow authenticated insert" ON public.assessment_invitations
    FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

-- Policy: Allow authenticated users to update (for admin panel)
CREATE POLICY "Allow authenticated update" ON public.assessment_invitations
    FOR UPDATE
    USING (auth.role() = 'authenticated');

-- Policy: Allow authenticated users to view all (for admin panel)
CREATE POLICY "Allow authenticated view all" ON public.assessment_invitations
    FOR SELECT
    TO authenticated
    USING (true);

-- Comments
COMMENT ON TABLE public.assessment_invitations IS 'Stores unique assessment invitation links for clients';
COMMENT ON COLUMN public.assessment_invitations.token IS 'Unique secure token for the assessment link';
COMMENT ON COLUMN public.assessment_invitations.status IS 'Current status of the invitation: pending, in_progress, completed, expired';
COMMENT ON COLUMN public.assessment_invitations.payment_status IS 'Payment status for future monetization';

